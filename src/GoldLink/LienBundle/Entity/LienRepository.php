<?php

namespace GoldLink\LienBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LienRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LienRepository extends EntityRepository
{
    public function rechercher($type , $categorie , $ordre , $userId){

        return $this->rechercherPublicNote($ordre);
    }

    /**
     * @param $ordre
     * @param $userId
     * @return array
     * function qui recherche les liens personnel par date
     */
    public function rechercherPersonnelDate($ordre , $userId,$tag = null){
            $requete = 'SELECT L FROM GoldLink\LienBundle\Entity\Lien L WHERE L.proprietaire ='.$userId;
            $requete .=' ORDER BY L.dateCreation '.$ordre;
            $requete = $this->getEntityManager()->createQuery($requete)->getResult();
            return $requete;

    }

    /**
     * @param $ordre
     * @param $userId
     * @return array
     * fonction qui recherche les liens du groupes par date
     */
    public function rechercherGroupeDate($ordre ,$userId){
        $requete = '
            SELECT PG publicationGroupe,L,U FROM GoldLink\LienBundle\Entity\PublicationGroupe PG
            join PG.utilisateur U join PG.lien L WHERE L.proprietaire =';
        $requete .=$userId.' ORDER BY PG.date '.$ordre;
        $requete = $this->getEntityManager()->createQuery($requete)->getResult();
        return $requete;
    }

    /**
     * @param $order
     * @return array
     * function qui recherche les liens public par date
     */

    public function rechercherPublicDate($order){
        $requete = $this->getEntityManager()->createQuery('
            SELECT l,p FROM GoldLinkLienBundle:Lien l
            JOIN l.publication p order by p.datePublication
        '.$order)->getResult();
        return $requete;
    }

    /**
     * @param $order
     * @param $userId
     * @return array
     * fonction qui qui recherche les liens personnel par note
     */
    public function rechercherPersonnelNote($order,$userId){
        $requete = $this->getEntityManager()->createQuery('
            SELECT n note, l , sum(n.nombreEtoile)/count(n.nombreEtoile) moyenne FROM
            GoldLinkLienBundle:notations n JOIN n.LienNote l
            WHERE l.proprietaire = '.$userId.' GROUP BY n.LienNote ORDER BY moyenne
        '.$order)->getResult();

        return $requete;
    }

    /**
     * @param $order
     * @param $userId
     * @return array
     * fonction qui recherche les liens du groupe par note
     */

    public function rechercherGroupeNote($order , $userId){
        $requete = $this->getEntityManager()->createQuery('
            SELECT notation Notation, lien , sum(notation.nombreEtoile)/count(notation.nombreEtoile) moyenne FROM
            GoldLinkLienBundle:notations notation JOIN notation.LienNote lien
            WHERE lien.id in (
              SELECT L.id FROM GoldLink\LienBundle\Entity\PublicationGroupe PG join
              PG.lien L where L.proprietaire ='.$userId.'
            ) GROUP BY notation.LienNote ORDER BY moyenne

        '.$order)->getResult();

        return $requete;
    }

    public function rechercherGroupeClic($order,$userId){
        $requete = $this->getEntityManager()->createQuery('
            SELECT cliquer clique, lien ,count(lien.id) nombreClique FROM
            GoldLink\LienBundle\Entity\cliquer cliquer join cliquer.lienClique lien
            WHERE lien.id in (
              SELECT L.id FROM GoldLink\LienBundle\Entity\PublicationGroupe PG join
              PG.lien L where L.proprietaire ='.$userId.'
            ) GROUP BY lien.id ORDER BY nombreClique

        '.$order)->getResult();

        return $requete;
    }

    /**
     * @param $order
     * @return array
     * fonction qui recherche les liens public par note
     */
    public function rechercherPublicNote($order){

        /**
         *  Si un lien été noté ce qu'il a été publié donc
         *  on liste tous les liens publié avec leur moyenne
         */
        $requete = $this->getEntityManager()->createQuery('
            SELECT notation , lien , sum(notation.nombreEtoile)/count(notation.nombreEtoile) moyenne FROM
            GoldLinkLienBundle:notations notation JOIN notation.LienNote lien
            GROUP BY notation.LienNote ORDER BY moyenne
        '.$order)->getResult();

        return $requete;
    }

    public function getListeLiensUser($user){
        $query = $this->getEntityManager()->createQuery('SELECT lien FROM GoldlinkLienBundle:Lien lien WHERE lien.proprietaire = :userId')
            ->setParameter('userId',$user);
        return $query->getResult();
    }

    public function rechercherPersonnelClic($order , $userId){
        $requete = '
            SELECT C clique,count(L.id) nombreClique
            FROM GoldLink\LienBundle\Entity\cliquer C
            join C.lienClique L where L.proprietaire =';
        $requete.=$userId.' GROUP BY L.id ORDER BY nombreClique '.$order;
        $requete = $this->getEntityManager()->createQuery($requete)->getResult();
        return $requete;

    }

    public function rechercherPersonnelPopularite($order,$userId){
        $requete = '
            SELECT E enregistrement , L.id , L.url , L.titre, L.dateCreation , count(L.id) nombreEnregistrement
            FROM GoldLink\LienBundle\Entity\LienEnregistrer E join
            E.lienConcerner L WHERE L.proprietaire =';
        $requete .=$userId.' GROUP BY L.id ORDER BY nombreEnregistrement '.$order;
        $requete = $this->getEntityManager()->createQuery($requete)->getResult();
        return $requete;
    }

    public function rechercherGroupePopularite($order , $userId){
        $requete = ' SELECT E enregistrement , L.id , L.url , L.titre, L.dateCreation , count(L.id) nombreEnregistrement
            FROM GoldLink\LienBundle\Entity\LienEnregistrer E join
            E.lienConcerner L WHERE L.id in(
                SELECT lien.id from GoldLink\LienBundle\Entity\PublicationGroupe p
                join p.lien lien
                WHERE lien.proprietaire = '.$userId.'

            )GROUP BY L.id ORDER BY nombreEnregistrement '.$order;
        $requete = $this->getEntityManager()->createQuery($requete)->getResult();
        return $requete;
    }

    public function rechercherPublicClic($order,$userId){
        $requete = '
            SELECT C clique,count(L.id) nombreClique
            FROM GoldLink\LienBundle\Entity\cliquer C
            join C.lienClique L where L.id in (
              SELECT lien FROM GoldLink\LienBundle\Entity\Lien lien
              join lien.visibiliteLien v where v.libelle = :libelle
              and lien.proprietaire ='.$userId.'
            )';
        $requete.=' GROUP BY L.id ORDER BY nombreClique '.$order;
        $requete = $this->getEntityManager()
            ->createQuery($requete)
            ->setParameter('libelle','public')
            ->getResult();
        return $requete;
    }

    public function rechercherPublicPopularite($order , $userId){
        $requete = ' SELECT E enregistrement , L.id , L.url , L.titre, L.dateCreation , count(L.id) nombreEnregistrement
            FROM GoldLink\LienBundle\Entity\LienEnregistrer E join
            E.lienConcerner L WHERE L.id in(
                 SELECT lien FROM GoldLink\LienBundle\Entity\Lien lien
              join lien.visibiliteLien v where v.libelle = :libelle
              and lien.proprietaire ='.$userId.'

            )GROUP BY L.id ORDER BY nombreEnregistrement '.$order;
        $requete = $this->getEntityManager()
            ->createQuery($requete)
            ->setParameter('libelle','public')
            ->getResult();
        return $requete;
    }
}
